h1. Grails architecture

h2. Overview

Grails at its core is built on top of the Spring framework. It uses Spring's core dependency injection container to manage all its objects as well as Spring's MVC framework as an underlying technology for its MVC subsystem. Grails adds Groovy-based convention-over-configuration system, scaffolding of the core artefacts such as Controllers and Views, highly dynamic persistence framework called GORM by wrapping Hibernate OR Mapper underneath, the Groovy-based DSLs for just about anything from configuration, validation constraints to very rich web flow DSL built on top of Spring WebFlow, highly flexible build scripting system based on Gant and Ivy.

The secret sauce of the Grails architecture which makes the above things possible is Groovy programming language with its highly dynamic facility, namely Meta Object Protocol (MOP). Also another advantage of using Groovy here is its ability to natively inter-operate with 'raw' Java, so that users of the framework (as well as Grails itself) are not constrained and limited by 'language isolation'. The entire rich repository of any imaginable Java libraries on Earth is available to Grails developers and users.

The core of Grails is mostly implemented in 'raw' Java

h2. Core (in $GRAILS_SRC_HOME/grails/src/commons)

The core of Grails runtime is based around the concept of <code>org.codehaus.groovy.grails.commons.GrailsApplication</code> which is a singleton runtime representation of a running Grails application, and a set of well known Artefacts known to the application represented as a root interface <code>org.codehaus.groovy.grails.commons.GrailsClass</code> Each <code>Artefact</code> knows how to handle a specific task well such as representing the domain classes, controller classes, services classes, etc. <code>GrailsApplication</code> interacts with <code>Artefacts</code> via <code>ArtefactHandler</code> API

The default implementation of <code>GrailsApplication</code> is <code>org.codehaus.groovy.grails.commons.DefaultGrailsApplication</code>

The Grails artefacts are:

* <code>org.codehaus.groovy.grails.commons.GrailsBootstrapClass</code>

* <code>org.codehaus.groovy.grails.commons.GrailsDomainClass</code>

* <code>org.codehaus.groovy.grails.commons.GrailsDataSource</code>

* <code>org.codehaus.groovy.grails.commons.GrailsControllerClass</code>

* <code>org.codehaus.groovy.grails.commons.GrailsCodecClass</code>

* <code>org.codehaus.groovy.grails.commons.GrailsServiceClass</code>

* <code>org.codehaus.groovy.grails.commons.GrailsTagLibClass</code>

* <code>org.codehaus.groovy.grails.commons.GrailsUrlMappingsClass</code>

and they're managed by:

* <code>org.codehaus.groovy.grails.commons.BootstrapArtefactHandler</code>

* <code>org.codehaus.groovy.grails.commons.DomainClassArtefactHandler</code>

* <code>org.codehaus.groovy.grails.commons.ControllerArtefactHandler</code>

* <code>org.codehaus.groovy.grails.commons.CodecArtefactHandler</code>

* <code>org.codehaus.groovy.grails.commons.ServiceArtefactHandler</code>

* <code>org.codehaus.groovy.grails.commons.TagLibArtefactHandler</code>

* <code>org.codehaus.groovy.grails.commons.UrlMappingsArtefactHandler</code>

h2. Core Pllugins(in in $GRAILS_SRC_HOME/grails/src/commons and in $GRAILS_SRC_HOME/grails/src/groovy)

The core of Grails is pretty small in the sense that it only has the functionality of managing running Grails applications, Groovy compilation and ClassLoading, command line and scripting functionality. All the other Artefacts are loaded into the system as a set of Grails <code>plugins</code> represented by <code>org.codehaus.groovy.grails.plugins.GrailsPlugin</code>. The key API for managing plugins in Grails is <code>org.codehaus.groovy.grails.plugins.GrailsPluginManager</code>.

To be continued...






